{"version":3,"sources":["app/Navbar.js","features/posts/PostsList.js","features/posts/postsSlice.js","features/posts/AddPostForm.js","App.js","api/server.js","app/store.js","index.js"],"names":["Navbar","className","PostsList","renderedPosts","useSelector","state","posts","map","post","key","id","title","content","substring","postsSlice","createSlice","name","initialState","reducers","postAdded","action","push","payload","actions","AddPostForm","useState","setTitle","setContent","dispatch","useDispatch","htmlFor","type","value","onChange","e","target","onClick","nanoid","App","seedDate","exact","path","render","Fragment","to","configureStore","reducer","postsReducer","IdSerializer","RestSerializer","extend","serializeIds","rng","seedrandom","randomSeedString","localStorage","getItem","getRandomInt","min","max","Math","ceil","floor","Date","toISOString","setItem","setRandom","faker","seed","getTime","randomFromArray","array","length","notificationTemplates","Server","routes","this","namespace","resource","server","schema","req","data","normalizedRequestAttrs","date","user","users","find","userId","Error","create","get","params","postId","comments","pastDate","numNotifications","now","queryParams","since","parseISO","valueOf","setMinutes","getMinutes","notifications","Array","db","template","between","message","read","isNew","models","Model","hasMany","belongsTo","comment","notification","factories","Factory","firstName","lastName","findName","username","internet","userName","afterCreate","createList","sentence","recent","article","reactions","thumbsUp","hooray","heart","rocket","eyes","association","past","text","paragraph","serializers","seeds","ReactDOM","store","document","getElementById"],"mappings":"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","file":"static/js/main.fcb46a76.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport const Navbar = () => {\r\n  return (\r\n    <nav>\r\n      <section>\r\n        <h1>Redux Essentials Example</h1>\r\n\r\n        <div className=\"navContent\">\r\n          <div className=\"navLinks\"></div>\r\n        </div>\r\n      </section>\r\n    </nav>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\n\r\nexport const PostsList = () => {\r\n  const posts = useSelector(state => state.posts)\r\n\r\n  const renderedPosts = posts.map(post => (\r\n    <article className=\"post-excerpt\" key={post.id}>\r\n      <h3>{post.title}</h3>\r\n      <p className=\"post-content\">{post.content.substring(0, 100)}</p>\r\n    </article>\r\n  ))\r\n\r\n  return (\r\n    <section className=\"posts-list\">\r\n      <h2>Posts</h2>\r\n      {renderedPosts}\r\n    </section>\r\n  )\r\n}","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialState = [\r\n  { id: '1', title: 'First Post!', content: 'Hello!' },\r\n  { id: '2', title: 'Second Post', content: 'More text' }\r\n]\r\n\r\nconst postsSlice = createSlice({\r\n  name: 'posts',\r\n  initialState,\r\n  reducers: {\r\n    postAdded(state,action) {\r\n      state.push(action.payload)\r\n    }\r\n  }\r\n})\r\n\r\nexport const {postAdded} = postsSlice.actions\r\n\r\nexport default postsSlice.reducer","import React, { useState } from 'react'\r\nimport { useDispatch } from 'react-redux'\r\nimport { nanoid } from '@reduxjs/toolkit'\r\n\r\nimport { postAdded } from './postsSlice'\r\n\r\nexport const AddPostForm = () => {\r\n  const [title, setTitle] = useState('')\r\n  const [content, setContent] = useState('')\r\n\r\n  const dispatch = useDispatch()\r\n\r\n  const onTitleChanged = e => setTitle(e.target.value)\r\n  const onContentChanged = e => setContent(e.target.value)\r\n\r\n  const onSavePostClicked = () => {\r\n    if (title && content) {\r\n      dispatch(\r\n        postAdded({\r\n          id: nanoid(),\r\n          title,\r\n          content\r\n        })\r\n      )\r\n\r\n      setTitle('')\r\n      setContent('')\r\n    }\r\n  }\r\n\r\n  return (\r\n    <section>\r\n      <h2>Add a New Post</h2>\r\n      <form>\r\n        <label htmlFor=\"postTitle\">Post Title:</label>\r\n        <input\r\n          type=\"text\"\r\n          id=\"postTitle\"\r\n          name=\"postTitle\"\r\n          value={title}\r\n          onChange={onTitleChanged}\r\n        />\r\n        <label htmlFor=\"postContent\">Content:</label>\r\n        <textarea\r\n          id=\"postContent\"\r\n          name=\"postContent\"\r\n          value={content}\r\n          onChange={onContentChanged}\r\n        />\r\n        <button type=\"button\" onClick={onSavePostClicked}>Save Post</button>\r\n      </form>\r\n    </section>\r\n  )\r\n}","import React from 'react'\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  Redirect\r\n} from 'react-router-dom'\r\n\r\nimport { Navbar } from './app/Navbar'\r\n\r\nimport { PostsList } from './features/posts/PostsList'\r\nimport {AddPostForm} from './features/posts/AddPostForm'\r\n\r\nfunction App() {\r\n  return (\r\n    <Router>\r\n      <Navbar />\r\n      <div className=\"App\">\r\n        <Switch>\r\n          <Route\r\n            exact\r\n            path=\"/\"\r\n            render={() => (\r\n              <React.Fragment>\r\n                <AddPostForm />\r\n                <PostsList />\r\n                </React.Fragment>\r\n            )}\r\n          />\r\n          <Redirect to=\"/\" />\r\n        </Switch>\r\n      </div>\r\n    </Router>\r\n  )\r\n}\r\n\r\nexport default App","import {\r\n  Server,\r\n  Model,\r\n  Factory,\r\n  belongsTo,\r\n  hasMany,\r\n  association,\r\n  RestSerializer,\r\n} from 'miragejs'\r\n\r\nimport { nanoid } from '@reduxjs/toolkit'\r\n\r\nimport faker from 'faker'\r\nimport { sentence, paragraph, article, setRandom } from 'txtgen'\r\nimport { parseISO } from 'date-fns'\r\nimport seedrandom from 'seedrandom'\r\n\r\nconst IdSerializer = RestSerializer.extend({\r\n  serializeIds: 'always',\r\n})\r\n\r\n// Set up a seeded random number generator, so that we get\r\n// a consistent set of users / entries each time the page loads.\r\n// This can be reset by deleting this localStorage value,\r\n// or turned off by setting `useSeededRNG` to false.\r\nlet useSeededRNG = true\r\n\r\nlet rng = seedrandom()\r\n\r\nif (useSeededRNG) {\r\n  let randomSeedString = localStorage.getItem('randomTimestampSeed')\r\n  let seedDate\r\n\r\n  if (randomSeedString) {\r\n    seedDate = new Date(randomSeedString)\r\n  } else {\r\n    seedDate = new Date()\r\n    randomSeedString = seedDate.toISOString()\r\n    localStorage.setItem('randomTimestampSeed', randomSeedString)\r\n  }\r\n\r\n  rng = seedrandom(randomSeedString)\r\n  setRandom(rng)\r\n  faker.seed(seedDate.getTime())\r\n}\r\n\r\nfunction getRandomInt(min, max) {\r\n  min = Math.ceil(min)\r\n  max = Math.floor(max)\r\n  return Math.floor(rng() * (max - min + 1)) + min\r\n}\r\n\r\nconst randomFromArray = (array) => {\r\n  const index = getRandomInt(0, array.length - 1)\r\n  return array[index]\r\n}\r\n\r\nconst notificationTemplates = [\r\n  'poked you',\r\n  'says hi!',\r\n  `is glad we're friends`,\r\n  'sent you a gift',\r\n]\r\n\r\nnew Server({\r\n  routes() {\r\n    this.namespace = 'fakeApi'\r\n    //this.timing = 2000\r\n\r\n    this.resource('users')\r\n    this.resource('posts')\r\n    this.resource('comments')\r\n\r\n    const server = this\r\n\r\n    this.post('/posts', function (schema, req) {\r\n      const data = this.normalizedRequestAttrs()\r\n      data.date = new Date().toISOString()\r\n      // Work around some odd behavior by Mirage that's causing an extra\r\n      // user entry to be created unexpectedly when we only supply a userId.\r\n      // It really want an entire Model passed in as data.user for some reason.\r\n      const user = schema.users.find(data.userId)\r\n      data.user = user\r\n\r\n      if (data.content === 'error') {\r\n        throw new Error('Could not save the post!')\r\n      }\r\n\r\n      const result = server.create('post', data)\r\n      return result\r\n    })\r\n\r\n    this.get('/posts/:postId/comments', (schema, req) => {\r\n      const post = schema.posts.find(req.params.postId)\r\n      return post.comments\r\n    })\r\n\r\n    this.get('/notifications', (schema, req) => {\r\n      const numNotifications = getRandomInt(1, 5)\r\n\r\n      let pastDate\r\n\r\n      const now = new Date()\r\n\r\n      if (req.queryParams.since) {\r\n        pastDate = parseISO(req.queryParams.since)\r\n      } else {\r\n        pastDate = new Date(now.valueOf())\r\n        pastDate.setMinutes(pastDate.getMinutes() - 15)\r\n      }\r\n\r\n      // Create N random notifications. We won't bother saving these\r\n      // in the DB - just generate a new batch and return them.\r\n      const notifications = [...Array(numNotifications)].map(() => {\r\n        const user = randomFromArray(schema.db.users)\r\n        const template = randomFromArray(notificationTemplates)\r\n        return {\r\n          id: nanoid(),\r\n          date: faker.date.between(pastDate, now).toISOString(),\r\n          message: template,\r\n          user: user.id,\r\n          read: false,\r\n          isNew: true,\r\n        }\r\n      })\r\n\r\n      return { notifications }\r\n    })\r\n  },\r\n  models: {\r\n    user: Model.extend({\r\n      posts: hasMany(),\r\n    }),\r\n    post: Model.extend({\r\n      user: belongsTo(),\r\n      comments: hasMany(),\r\n    }),\r\n    comment: Model.extend({\r\n      post: belongsTo(),\r\n    }),\r\n    notification: Model.extend({}),\r\n  },\r\n  factories: {\r\n    user: Factory.extend({\r\n      id() {\r\n        return nanoid()\r\n      },\r\n      firstName() {\r\n        return faker.name.firstName()\r\n      },\r\n      lastName() {\r\n        return faker.name.lastName()\r\n      },\r\n      name() {\r\n        return faker.name.findName(this.firstName, this.lastName)\r\n      },\r\n      username() {\r\n        return faker.internet.userName(this.firstName, this.lastName)\r\n      },\r\n\r\n      afterCreate(user, server) {\r\n        server.createList('post', 3, { user })\r\n      },\r\n    }),\r\n    post: Factory.extend({\r\n      id() {\r\n        return nanoid()\r\n      },\r\n      title() {\r\n        return sentence()\r\n      },\r\n      date() {\r\n        return faker.date.recent(7)\r\n      },\r\n      content() {\r\n        return article(1)\r\n      },\r\n      reactions() {\r\n        return {\r\n          thumbsUp: 0,\r\n          hooray: 0,\r\n          heart: 0,\r\n          rocket: 0,\r\n          eyes: 0,\r\n        }\r\n      },\r\n      afterCreate(post, server) {\r\n        //server.createList('comment', 3, { post })\r\n      },\r\n\r\n      user: association(),\r\n    }),\r\n    comment: Factory.extend({\r\n      id() {\r\n        return nanoid()\r\n      },\r\n      date() {\r\n        return faker.date.past(2)\r\n      },\r\n      text() {\r\n        return paragraph()\r\n      },\r\n      post: association(),\r\n    }),\r\n  },\r\n  serializers: {\r\n    user: IdSerializer,\r\n    post: IdSerializer,\r\n    comment: IdSerializer,\r\n  },\r\n  seeds(server) {\r\n    server.createList('user', 3)\r\n  },\r\n})\r\n","import { configureStore } from '@reduxjs/toolkit'\r\n\r\nimport postsReducer from '../features/posts/postsSlice'\r\n\r\nexport default configureStore({\r\n  reducer: {\r\n    posts: postsReducer\r\n  },\r\n})\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\nimport './index.css'\r\nimport App from './App'\r\nimport store from './app/store'\r\nimport { Provider } from 'react-redux'\r\nimport './api/server'\r\n\r\nReactDOM.render(\r\n  <Provider store={store}>\r\n    <App />\r\n  </Provider>,\r\n  document.getElementById('root')\r\n)\r\n"],"sourceRoot":""}